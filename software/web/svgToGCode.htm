<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>SVG To GCode</title>
	<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>

	<script src="js/paper.js"></script>

	<script>

	var machine = {
		bedW: 850,
		bedD: 650,
		bedH: 150
	};

	var lastF = 0;


	paper.install(window);

	$( document ).ready(function() {
  		var canvas = document.getElementById('canvas');
		paper.setup(canvas);

		// illustrate the machine bed
		var b = new Path.Rectangle(0,0,machine.bedW, machine.bedD);
		b.strokeColor = 'grey';

		var file = document.getElementById('file');
		file.addEventListener('change', function (event) {
			var files = event.target.files;
			for (var i = 0; i < files.length; i++) {
				var file = files[i];
				if (file.type.match('svg')) {
					project.importSVG(file, {'expandShapes':true, 'onLoad':function(item) {

						if (true) {
							// scale item
							var w1  = item.bounds.width;
							var h1 = item.bounds.height;
							//var scale = machine.bedD/h1;
							var scale = 80/h1;

							item.transformContent = true;
							item.scale(scale);
						}


						item.fillColor = new Color(0,0,0,0);
						item.strokeWidth = 0.5;
						//item.strokeColor = 'red';

						// position at bottom left of bed
						item.position = new Point(item.bounds.width/2, machine.bedD - item.bounds.height/2);


						// generate gcode
						genGCode(item);

						view.draw();

					}
					});
				}
			}
		});


		view.draw();

		view.on('resize', function(event) {
			view.draw();
		});
	});

	function clamp(val, min, max){
   	    return Math.max(min, Math.min(max, val));
	}


	function genG1(x,y,f) {
		newF = f;
		s = 'G1 X'+clamp(x, 0, machine.bedW).toFixed(1)+
			' Y'+clamp(machine.bedD-y, 0, machine.bedD).toFixed(1);
		if (newF != lastF)
			s += ' F'+clamp(f, 0, 18000).toFixed(0);
		s += '\r\n';
		lastF = f;
		return s;
	}

	function genG5(x,y,i,j,k,l,f) {
		newF = f;
		s = 'G5'+
		       'X'+clamp(x, 0, machine.bedW).toFixed(1)+
		       'Y'+clamp(machine.bedD-y, 0, machine.bedD).toFixed(1)+
		       'I'+clamp(i, 0, machine.bedW).toFixed(1)+
		       'J'+clamp(machine.bedD-j, 0, machine.bedD).toFixed(1)+
		       'K'+clamp(k, 0, machine.bedW).toFixed(1)+
		       'L'+clamp(machine.bedD-l, 0, machine.bedD).toFixed(1);
		if (newF != lastF)
			s += ' F'+clamp(f, 0, 18000).toFixed(0);
		s += '\r\n';
		lastF = f;
		return s;
	}

	function genM4(pwr) {
		return 'M4 S'+clamp(pwr,0,100) + '\r\n';
	}

	function genM5() {
		return 'M5\r\n';
	}

	function genGCodeForPath(path) {
		var gcode = '';
		var pwr = 100;
		var speed = 400;

		// black = cut
		pwr = 30;
		speed = 10000;

		// red = score
		if (path.strokeColor.red > 0) {
			pwr = 18;
			speed = 17000;
		}

		// move to start point
		gcode += genG1(path.curves[0].point1.x, path.curves[0].point1.y, 10000);

		// start laser
		gcode += genM4(pwr);

		// process curves
		//path.flatten(0.2);

		for (var i=0; i<path.curves.length; i++) {
			var curve = path.curves[i];

			if (curve.isLinear()) {

				gcode += genG1(curve.point2.x, curve.point2.y, speed);

			} else {

				gcode += genG5(curve.point2.x,
						       curve.point2.y,
							   curve.handle1.x + curve.point1.x,
							   curve.handle1.y + curve.point1.y,
							   curve.handle2.x + curve.point2.x,
							   curve.handle2.y + curve.point2.y,
							   speed);

			}
		}

		// stop laser
		gcode += genM5();

		return gcode;
	}

	function genGCodeForItem(item) {
		var gcode = '';

		if (item.children && item.children.length > 0) {
			gcode += '';

			for (var i=0; i<item.children.length; i++) {
				gcode += genGCodeForItem(item.children[i]);
			}
		} else if (item._class == 'Path') {
			gcode += genGCodeForPath(item);
		}

		return gcode;
	}


	function genGCode(item) {
		// parse item to generate GCode

		// Z111 is perfect for the bed
		// F1500 works well for stiff paper


		var gcode = 'G28 XY\r\n'+
					'G28 Z\r\n'+
					'G1 Z111\r\n'+
				    'G1 F10000\r\n'+
					'M669\r\n';

		gcode += genGCodeForItem(item);


		gcode += 'M670\r\n' + 'G1 X850 Y650 F10000\r\n';

		$('#gcode').html(gcode);
	}


	</script>

</head>
<body>
	<form>
	<input type="file" id="file">
	</form>
	<div id="debug"></div>
	<canvas id="canvas" width="900" height="3000"></canvas>

	<br/>

	<textarea id="gcode" style="clear:both; width:300px; height:700px; position:absolute; left: 900px; top:0px;"></textarea>
</body>
</html>
